#!/usr/bin/make -f
# based on Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This is the debhelper compatability version to use.
export DH_COMPAT=2

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

INSTALL_TARGET := install
BUILD_TARGET := all
DH_STRIP := dh_strip
ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
        INSTALL_TARGET := install-debug
        BUILD_TARGET := debug
endif
ifneq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
        DH_STRIP := true #ie. don't strip!
endif


# the "optimize" flag disables compatibility hacks
HOST_OPTION := 
ifeq (,$(findstring optimize,$(DEB_BUILD_OPTIONS)))
 $(warning trying to disable machine-specific optimizations)
 $(warning add 'optimize' to DEB_BUILD_OPTIONS to enable them)
 DEB_HOST_GNU_TYPE := \
  $(sehll echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 #on intel architectures, xine probes CPU specific optimizations on runtime
 DEB_HOST_GNU_TYPE := \
  $(shell echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^i.86/i686/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^i.86/i686/')
 ifneq ($DEB_HOST_GNU_TYPE,$DEB_BUILD_GNU_TYPE)
  $(warning WARNING: cross compiling is not supported by xine)
  $(warning .        using DEB_BUILD_GNU_TYPE = $(DEB_BUILD_GNU_TYPE))
  $(warning .        ignoring DEB_HOST_GNU_TYPE = $(DEB_HOST_GNU_TYPE))
  DEB_HOST_GNU_TYPE := $(DEB_BUILD_GNU_TYPE)
 endif
 HOST_OPTION := --host=$(DEB_HOST_GNU_TYPE)
endif

configure: configure-stamp
configure-stamp:
	dh_testdir
	./configure --prefix=/usr --mandir=\$${prefix}/share/man \
                    $(HOST_OPTION) || \
	(echo "=== config.log: ==="; cat config.log; false)

	touch configure-stamp

build: configure-stamp build-stamp
build-stamp:
	dh_testdir

	$(MAKE) $(BUILD_TARGET)

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp
	test -f Makefile && $(MAKE) distclean || true

	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	$(MAKE) $(INSTALL_TARGET) DESTDIR=$(CURDIR)/debian/xine-ui
	mkdir -p debian/xine-ui/usr/share/doc/xine-ui
	install -m 644 README debian/xine-ui/usr/share/doc/xine-ui
	# these must not be compressed, or xine's online help will fail:
	cd debian/xine-ui/usr/share/doc/xine-ui; \
	mkdir -p ../../xine/doc; \
	mv README.config_?? README_?? FAQ_?? ../../xine/doc; \
	ln -s ../../xine/doc/* .

binary-indep: build install
# We have nothing to do by default.

# Build architecture-dependent files here.
binary-arch: build install
	dh_testversion 2
	dh_testdir
	dh_testroot
#	dh_installdebconf	
	dh_installdocs
	dh_installmenu
	dh_installmime
	dh_installchangelogs -k ChangeLog
	dh_link
	$(DH_STRIP)
	dh_compress
	dh_fixperms
	dh_installdeb
#	dh_shlibdeps
	chmod +x debian/shlibdeps.sh
	debian/shlibdeps.sh xine-ui
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
